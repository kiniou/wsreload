// Generated by CoffeeScript 1.6.3
(function() {
  var connect, endpoint, host, onclose, onmessage, onopen, polling, port, send, watched_files;

  polling = 2500;

  host = "127.0.0.1";

  port = 50637;

  endpoint = "wsreload";

  watched_files = {};

  onopen = function() {
    console.log("Connection opened");
    send("subscribe|" + navigator.userAgent);
    return chrome.tabs.query({}, function(tabs) {
      var file, tab, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = tabs.length; _i < _len; _i++) {
        tab = tabs[_i];
        if (tab.url.indexOf('file://') === 0) {
            file = decodeURI(tab.url.replace('file://', ''));
            var index = file.indexOf('#');
            if (index > 0) {
                file = file.substring(0,index);
            }
          watched_files[tab.id] = file;
          _results.push(send("watch|" + file));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
  };

  chrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {
    var file, url;
    if (!changeInfo.url) {
      return;
    }
    url = changeInfo.url;
    if (tabId in watched_files) {
      send("unwatch|" + watched_files[tabId]);
    }
    if (url.indexOf('file://') !== 0) {
      return;
    }
    file = decodeURIComponent(url.replace('file://', ''));
    var index = file.indexOf('#');
    if (index > 0) {
        file = file.substring(0,index);
    }
    watched_files[tabId] = file;
    return send("watch|" + file);
  });

  chrome.tabs.onRemoved.addListener(function(tabId, removeInfo) {
    if (tabId in watched_files) {
      return send("unwatch|" + watched_files[tabId]);
    }
  });

  onmessage = function(event) {
    var eventobj;
    console.log(event.data);
    eventobj = JSON.parse(event.data);
    if (eventobj.url) {
      eventobj.url = encodeURI(eventobj.url);
    }
    return chrome.tabs.query(eventobj, function(tabs) {
      var tab, _i, _len;
      for (_i = 0, _len = tabs.length; _i < _len; _i++) {
        tab = tabs[_i];
        chrome.tabs.reload(tab.id, {
          bypassCache: true
        }, (function() {
          return console.log("Reloaded " + this.title);
        }).bind(tab));
      }
      return chrome.windows.getAll(function(windows) {
        var win, _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = windows.length; _j < _len1; _j++) {
          win = windows[_j];
          _results.push(chrome.tabs.query({
            windowId: win.id,
            active: true
          }, (function(active_tabs) {
            var active_tab, to_highlight,
              _this = this;
            active_tab = active_tabs[0];
            to_highlight = tabs.filter(function(tab) {
              return tab.windowId === _this.id;
            }).map(function(tab) {
              return tab.index;
            });
            to_highlight.unshift(active_tab.index);
            return chrome.tabs.highlight({
              windowId: this.id,
              tabs: to_highlight
            }, (function() {}));
          }).bind(win)));
        }
        return _results;
      });
    });
  };

  onclose = function() {
    console.log("Connection closed");
    return setTimeout(connect, polling);
  };

  connect = function() {
    console.log("Connecting");
    window.ws = new WebSocket("ws://" + host + ":" + port + "/" + endpoint);
    if (ws.readyState === 3) {
      console.log("Failed");
      setTimeout(connect, polling);
      return;
    }
    ws.onopen = onopen;
    ws.onmessage = onmessage;
    return ws.onclose = onclose;
  };

  send = function(message) {
    console.log("Sending " + message);
    return ws.send(message);
  };

  connect();

}).call(this);
